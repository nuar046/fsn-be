/**
 * PersonalizedApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PAURLMAPPINGVIEWMODEL', 'model/UMUSERATTRIBUTEVIEWMODEL', 'model/UserCredentialsViewModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PAURLMAPPINGVIEWMODEL'), require('../model/UMUSERATTRIBUTEVIEWMODEL'), require('../model/UserCredentialsViewModel'));
  } else {
    // Browser globals (root is window)
    if (!root.PersonalizedApi) {
      root.PersonalizedApi = {};
    }
    root.PersonalizedApi.ApiManagerApi = factory(root.PersonalizedApi.ApiClient, root.PersonalizedApi.PAURLMAPPINGVIEWMODEL, root.PersonalizedApi.UMUSERATTRIBUTEVIEWMODEL, root.PersonalizedApi.UserCredentialsViewModel);
  }
}(this, function(ApiClient, PAURLMAPPINGVIEWMODEL, UMUSERATTRIBUTEVIEWMODEL, UserCredentialsViewModel) {
  'use strict';

  /**
   * ApiManager service.
   * @module api/ApiManagerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ApiManagerApi. 
   * @alias module:api/ApiManagerApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiManagerChangeUserPassword operation.
     * @callback module:api/ApiManagerApi~apiManagerChangeUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserCredentialsViewModel} user 
     * @param {module:api/ApiManagerApi~apiManagerChangeUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerChangeUserPassword = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user == undefined || user == null) {
        throw new Error("Missing the required parameter 'user' when calling apiManagerChangeUserPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/ChangeUserPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerCreate operation.
     * @callback module:api/ApiManagerApi~apiManagerCreateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PAURLMAPPINGVIEWMODEL} model 
     * @param {module:api/ApiManagerApi~apiManagerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerCreate = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling apiManagerCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/CreateUrlMapping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerDelete operation.
     * @callback module:api/ApiManagerApi~apiManagerDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ApiManagerApi~apiManagerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling apiManagerDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerForgotUserPassword operation.
     * @callback module:api/ApiManagerApi~apiManagerForgotUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} username 
     * @param {String} fullname 
     * @param {module:api/ApiManagerApi~apiManagerForgotUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerForgotUserPassword = function(username, fullname, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling apiManagerForgotUserPassword");
      }

      // verify the required parameter 'fullname' is set
      if (fullname == undefined || fullname == null) {
        throw new Error("Missing the required parameter 'fullname' when calling apiManagerForgotUserPassword");
      }


      var pathParams = {
      };
      var queryParams = {
        'username': username,
        'fullname': fullname
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/ForgotUserPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerForgotUserUsername operation.
     * @callback module:api/ApiManagerApi~apiManagerForgotUserUsernameCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email 
     * @param {String} fullname 
     * @param {module:api/ApiManagerApi~apiManagerForgotUserUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerForgotUserUsername = function(email, fullname, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling apiManagerForgotUserUsername");
      }

      // verify the required parameter 'fullname' is set
      if (fullname == undefined || fullname == null) {
        throw new Error("Missing the required parameter 'fullname' when calling apiManagerForgotUserUsername");
      }


      var pathParams = {
      };
      var queryParams = {
        'email': email,
        'fullname': fullname
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/ForgotUserUsername', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerGet operation.
     * @callback module:api/ApiManagerApi~apiManagerGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} consumerkey 
     * @param {String} consumersecret 
     * @param {String} username 
     * @param {String} setdata 
     * @param {module:api/ApiManagerApi~apiManagerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerGet = function(consumerkey, consumersecret, username, setdata, callback) {
      var postBody = null;

      // verify the required parameter 'consumerkey' is set
      if (consumerkey == undefined || consumerkey == null) {
        throw new Error("Missing the required parameter 'consumerkey' when calling apiManagerGet");
      }

      // verify the required parameter 'consumersecret' is set
      if (consumersecret == undefined || consumersecret == null) {
        throw new Error("Missing the required parameter 'consumersecret' when calling apiManagerGet");
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling apiManagerGet");
      }

      // verify the required parameter 'setdata' is set
      if (setdata == undefined || setdata == null) {
        throw new Error("Missing the required parameter 'setdata' when calling apiManagerGet");
      }


      var pathParams = {
        'consumerkey': consumerkey,
        'consumersecret': consumersecret,
        'username': username,
        'setdata': setdata
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/SetApiRouting/{consumerkey}/{consumersecret}/{username}/{setdata}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerGetAuthenticationBased operation.
     * @callback module:api/ApiManagerApi~apiManagerGetAuthenticationBasedCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authenticationtype 
     * @param {module:api/ApiManagerApi~apiManagerGetAuthenticationBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerGetAuthenticationBased = function(authenticationtype, callback) {
      var postBody = null;

      // verify the required parameter 'authenticationtype' is set
      if (authenticationtype == undefined || authenticationtype == null) {
        throw new Error("Missing the required parameter 'authenticationtype' when calling apiManagerGetAuthenticationBased");
      }


      var pathParams = {
        'authenticationtype': authenticationtype
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/GetAuthenticationBased/{authenticationtype}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerGetUrlMapping operation.
     * @callback module:api/ApiManagerApi~apiManagerGetUrlMappingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApiManagerApi~apiManagerGetUrlMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerGetUrlMapping = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/GetUrlMapping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerGetUserProfile operation.
     * @callback module:api/ApiManagerApi~apiManagerGetUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} username 
     * @param {module:api/ApiManagerApi~apiManagerGetUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerGetUserProfile = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling apiManagerGetUserProfile");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/GetUserProfile/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiManagerUpdateUserProfile operation.
     * @callback module:api/ApiManagerApi~apiManagerUpdateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} username 
     * @param {module:model/UMUSERATTRIBUTEVIEWMODEL} model 
     * @param {module:api/ApiManagerApi~apiManagerUpdateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiManagerUpdateUserProfile = function(username, model, callback) {
      var postBody = model;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling apiManagerUpdateUserProfile");
      }

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling apiManagerUpdateUserProfile");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/Api/ApiManager/UpdateUserProfile/{username}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
